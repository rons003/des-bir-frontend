//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: Credentials | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<Response> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param objType (optional) 
     * @return Success
     */
    bIRTransactions(objType: number | null | undefined, datefrom: Date | null | undefined, dateto: Date | null | undefined): Observable<any[]> {
        let url_ = this.baseUrl + "/api/BIRTransaction/BIRTransactions?";
        if (objType !== undefined && objType !== null)
            url_ += "ObjType=" + encodeURIComponent("" + objType) + "&";
        if (datefrom !== undefined && datefrom !== null)
            url_ += "Datefrom=" + encodeURIComponent("" + datefrom) + "&";
        if (dateto !== undefined && dateto !== null)
            url_ += "Dateto=" + encodeURIComponent("" + dateto) + "&";
        url_ = url_.replace(/[?&]$/, "");
        
        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBIRTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBIRTransactions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any[]>;
        }));
    }

    protected processBIRTransactions(response: HttpResponseBase): Observable<any[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param objType (optional) 
     * @param search (optional) 
     * @return Success
     */
    bIRTransactionsUploaded(objType: number | null | undefined, search: string | null | undefined): Observable<any[]> {
        let url_ = this.baseUrl + "/api/BIRTransaction/BIRTransactionsUploaded?";
        if (objType !== undefined && objType !== null)
            url_ += "ObjType=" + encodeURIComponent("" + objType) + "&";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBIRTransactionsUploaded(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBIRTransactionsUploaded(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any[]>;
        }));
    }

    protected processBIRTransactionsUploaded(response: HttpResponseBase): Observable<any[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
    bir_data(objType: number, id: number, internal: boolean): Observable<BIRData> {
        let url_ = this.baseUrl + "/api/BIRTransaction/BIRTransactionsID?";
        if (objType !== undefined && objType !== null)
            url_ += "ObjType=" + encodeURIComponent("" + objType) + "&";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
            url_ += "id="+ encodeURIComponent("" + id)+ "&";
        url_ += "Internal="+ encodeURIComponent("" + internal);

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBirData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBirData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BIRData>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BIRData>;
        }));
    }

    protected processBirData(response: HttpResponseBase): Observable<BIRData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BIRData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addAPDPI(body: number[] | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRTransaction/addAPDPI";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddAPDPI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddAPDPI(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }

    addAPDPIEdit(body: BIRTransaction  | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRChangedate/addAPDPI";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddAPDPI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddAPDPI(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }


    protected processAddAPDPI(response: HttpResponseBase): Observable<Response> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addAPInvoice(body: number[] | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRTransaction/addAPInvoice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddAPInvoice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddAPInvoice(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }
    addAPInvoiceEdit(body: BIRTransaction | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRChangedate/addAPInvoice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddAPInvoice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddAPInvoice(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }

    protected processAddAPInvoice(response: HttpResponseBase): Observable<Response> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addAPCMEdit(body: BIRTransaction | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRChangedate/addAPCM";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddAPCM(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddAPCM(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }
    addAPCM(body: number[] | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRTransaction/addAPCM";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddAPCM(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddAPCM(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }

    protected processAddAPCM(response: HttpResponseBase): Observable<Response> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addOutgoingPayments(body: number[] | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRTransaction/addOutgoingPayments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOutgoingPayments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOutgoingPayments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }

    protected processAddOutgoingPayments(response: HttpResponseBase): Observable<Response> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
    addIncommingPayments(body: number[] | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRTransaction/addIncommingPayments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddIncommingPayments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddIncommingPayments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }
    protected processAddIncommingPayments(response: HttpResponseBase): Observable<Response> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addJournalEntry(body: number[] | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRTransaction/addJournalEntry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddJournalEntry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddJournalEntry(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }
    addJournalEntryEdit(body: BIRTransaction | null | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/BIRChangedate/addJournalEntry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddJournalEntry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddJournalEntry(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }

    protected processAddJournalEntry(response: HttpResponseBase): Observable<Response> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
     
    bIRValidation (id: number | null | undefined): Observable<any[]> {
        let url_ = this.baseUrl + "/api/BIRTransaction/BIRTransactionsValidation?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
    
        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
    
        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBIRValidation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBIRValidation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any[]>;
        }));
    }
    
    protected processBIRValidation(response: HttpResponseBase): Observable<any[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;
    
        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Credentials implements ICredentials {
    company?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;

    constructor(data?: ICredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.company = _data["company"];
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): Credentials {
        data = typeof data === 'object' ? data : {};
        let result = new Credentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company"] = this.company;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface ICredentials {
    company?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
}

export class Response implements IResponse {
    status?: string | undefined;
    message?: string | undefined;
    data?: any | undefined;

    constructor(data?: IResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.message = _data["message"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Response {
        data = typeof data === 'object' ? data : {};
        let result = new Response();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        data["data"] = this.data;
        return data;
    }
}

export interface IResponse {
    status?: string | undefined;
    message?: string | undefined;
    data?: any | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
export class BIRDataDetails implements IBIRDataDetails {
    objType?: string | undefined;
    docEntry?: number | undefined;
    lineNum?: number | undefined;
    uaddDescription?: string | undefined;
    uitemCode?: string | undefined;
    branch?: string | undefined;
    itemCode?: string | undefined;
    description?: string | undefined;
    equipment?: string | undefined;
    vatGroup?: string | undefined;
    quantity?: number | undefined;
    uoMCode?: string | undefined;
    discount?: number | undefined;
    unitPrice?: number | undefined;
    lineTotal?: number | undefined;
    grossPrice?: number | undefined;
    grossTotal?: number | undefined;
    serialItem?:string | undefined;
    chasisItem?:string | undefined;
    employeeName?:string | undefined;
    aPsupport?:string | undefined;
    acctcode?:string | undefined;
    srp?:number | undefined;
    lineRemarks?:string | undefined;
    postingDate?: Date | undefined;
    dueDate?: Date | undefined;
    debit?: number | undefined;
    credit?: number | undefined;
    bpName?:string | undefined;
    employee?:string | undefined;
    shortName?:string | undefined;
    suggestEntryType?:string | undefined;
    suggestEntryCode?: string | undefined;
    suggestEntryDesc?:string | undefined;
    additionalRemarks?:string | undefined;
    deductionType?:string | undefined;
    balanceDueLC?: number | undefined;
    balanceDueSC?: number | undefined;
    rebate: number | undefined;
    entryType: string | undefined;
    uCode: string | undefined;
    acctName: string | undefined;
    instId: number | undefined;

    constructor(data?: IBIRDataDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.objType = _data["objType"];
            this.docEntry = _data["docEntry"];
            this.lineNum = _data["lineNum"];
            this.uaddDescription = _data["uaddDescription"];
            this.uitemCode = _data["uitemCode"];
            this.branch = _data["branch"];
            this.itemCode = _data["itemCode"];
            this.description = _data["description"];
            this.equipment = _data["equipment"];
            this.vatGroup = _data["vatGroup"];
            this.quantity = _data["quantity"];
            this.uoMCode = _data["uoMCode"];
            this.discount = _data["discount"];
            this.unitPrice = _data["unitPrice"];
            this.lineTotal = _data["lineTotal"];
            this.grossPrice = _data["grossPrice"];
            this.grossTotal = _data["grossTotal"];
            this.serialItem = _data["serialItem"];
            this.chasisItem = _data["chasisItem"];
            this.employeeName = _data["employeeName"];
            this.aPsupport = _data["aPsupport"];
            this.acctcode = _data["acctcode"];
            this.srp = _data["srp"];
            this.lineRemarks = _data["lineRemarks"];
            this.postingDate = _data["postingDate"];
            this.dueDate = _data["dueDate"];
            this.debit = _data["debit"];
            this.credit = _data["credit"];
            this.bpName = _data["bpName"];
            this.suggestEntryType = _data["suggestEntryType"];
            this.suggestEntryDesc = _data["suggestEntryDesc"];
            this.suggestEntryCode = _data["suggestEntryCode"];
            this.additionalRemarks = _data["additionalRemarks"];
            this.deductionType = _data["deductionType"];
            this.balanceDueLC = _data["balanceDueLC"];
            this.balanceDueSC = _data["balanceDueSC"];
            this.employee = _data["employee"];
            this.shortName = _data["shortName"];
            this.rebate = _data["rebate"];
            this.entryType = _data["uenttype"];
            this.acctName = _data["acctName"];
            this.uCode = _data["ucode"];
            this.instId = _data["instId"];
        }
    }

    static fromJS(data: any): BIRDataDetails {
        data = typeof data === 'object' ? data : {};
        let result = new BIRDataDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["objType"] = this.objType;
        data["docEntry"] = this.docEntry;
        data["lineNum"] = this.lineNum;
        data["uaddDescription"] = this.uaddDescription;
        data["uitemCode"] = this.uitemCode;
        data["branch"] = this.branch;
        data["itemCode"] = this.itemCode;
        data["description"] = this.description;
        data["equipment"] = this.equipment;
        data["vatGroup"] = this.vatGroup;
        data["quantity"] = this.quantity;
        data["uoMCode"] = this.uoMCode;
        data["discount"] = this.discount;
        data["unitPrice"] = this.unitPrice;
        data["lineTotal"] = this.lineTotal;
        data["grossPrice"] = this.grossPrice;
        data["grossTotal"] = this.grossTotal;
        data["serialItem"] = this.serialItem;
        data["chasisItem"] = this.chasisItem;
        data["employeeName"] = this.employeeName;
        data["aPsupport"] = this.aPsupport;
        data["acctcode"] = this.acctcode;
        data["lineRemarks"] = this.lineRemarks;
        data["postingDate"] = this.postingDate;
        data["dueDate"] = this.dueDate;
        data["debit"] = this.debit;
        data["credit"] = this.credit;
        data["bpName"] = this.bpName;
        data["suggestEntryType"] = this.suggestEntryType;
        data["suggestEntryDesc"] = this.suggestEntryDesc;
        data["suggestEntryCode"] = this.suggestEntryCode;
        data["additionalRemarks"] = this.additionalRemarks;
        data["deductionType"] = this.deductionType;
        data["balanceDueLC"] = this.balanceDueLC;
        data["balanceDueSC"] = this.balanceDueSC;
        data["employee"] = this.employee;
        data["shortName"] = this.shortName;
        data["rebate"] = this.rebate;
        data["acctName"] = this.acctName;
        data["uenttype"] = this.entryType;
        data["ucode"] = this.uCode;
        data["instId"] = this.instId;

        return data;
    }
}
export interface IBIRDataDetails {
    objType?: string | undefined;
    docEntry?: number | undefined;
    lineNum?: number | undefined;
    uaddDescription?: string | undefined;
    uitemCode?: string | undefined;
    branch?: string | undefined;
    itemCode?: string | undefined;
    description?: string | undefined;
    equipment?: string | undefined;
    vatGroup?: string | undefined;
    quantity?: number | undefined;
    uoMCode?: string | undefined;
    discount?: number | undefined;
    unitPrice?: number | undefined;
    lineTotal?: number | undefined;
    grossPrice?: number | undefined;
    grossTotal?: number | undefined;
    serialItem?:string | undefined;
    chasisItem?:string | undefined;
    employeeName?:string | undefined;
    aPsupport?:string | undefined;
    acctcode?:string | undefined;
    srp?:number | undefined;
    BranchName?:string | undefined;
    lineRemarks?:string | undefined;
    postingDate?: Date | undefined;
    dueDate?: Date | undefined;
    debit?: number | undefined;
    credit?: number | undefined;
    bpName?:string | undefined;
    employee?:string | undefined;
    shortName?:string | undefined;
    suggestEntryType?:string | undefined;
    suggestEntryCode?: string | undefined;
    suggestEntryDesc?:string | undefined;
    additionalRemarks?:string | undefined;
    deductionType?:string | undefined;
    balanceDueLC?: number | undefined;
    balanceDueSC?: number | undefined;
    rebate: number | undefined;
    entryType: string | undefined;
    uCode: string | undefined;
    acctName: string | undefined;
    instId: number | undefined;
}

export class BIRData implements IBIRData {
    docEntry?: number | undefined;
    docNum?: number | undefined;
    cardCode?: string | undefined;
    cardName?: string | undefined;
    branch?: number | undefined;
    branchName?: string | undefined;
    docDate?: Date | undefined;
    docDueDate?: Date | undefined;
    docTotal?: number | undefined;
    vatSum?: number | undefined;
    docStatus?: string | undefined;
    comments?: string | undefined;
    currency?: string | undefined;
    address?: string | undefined;
    numAtCard?: string | undefined;
    birBaseRef?: string | undefined;
    transId?: number | undefined;
    ref1?: number | undefined;
    ref2?: string | undefined;
    ref3?: number | undefined;
    doctype: string | undefined;

    details?: BIRDataDetails[] | undefined;

    constructor(data?: IBIRData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.docEntry = _data["docEntry"];
            this.docNum = _data["docNum"];
            this.cardCode = _data["cardCode"];
            this.cardName = _data["cardName"];
            this.branch = _data["branch"];
            this.branchName = _data["branchName"];
            this.docDate = _data["docDate"] ? new Date(_data["docDate"].toString()) : <any>undefined;
            this.docDueDate = _data["docDueDate"] ? new Date(_data["docDueDate"].toString()) : <any>undefined;
            this.docTotal = _data["docTotal"];
            this.vatSum = _data["vatsum"];
            this.docStatus = _data["docStatus"];
            this.comments = _data["comments"];
            this.currency = _data["currency"];
            this.address = _data["address"];
            this.numAtCard = _data["numAtCard"];
            this.birBaseRef = _data["birBaseRef"];
            this.transId = _data["transId"];
            this.ref1 = _data["ref1"];
            this.ref2 = _data["ref2"];
            this.ref3 = _data["ref3"];
            this.doctype = _data["docType"];
            
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(BIRDataDetails.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BIRData {
        data = typeof data === 'object' ? data : {};
        let result = new BIRData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docEntry"] = this.docEntry;
        data["docNum"] = this.docNum;
        data["cardCode"] = this.cardCode;
        data["cardName"] = this.cardName;
        data["branch"] = this.branch;
        data["branchName"] = this.branchName;
        data["docDate"] = this.docDate ? this.docDate.toISOString() : <any>undefined;
        data["docDueDate"] = this.docDueDate ? this.docDueDate.toISOString() : <any>undefined;
        data["docTotal"] = this.docTotal;
        data["vatsum"] = this.vatSum;
        data["docStatus"] = this.docStatus;
        data["comments"] = this.comments;
        data["currency"] = this.currency;
        data["address"] = this.address;
        data["numAtCard"] = this.numAtCard;
        data["birBaseRef"] = this.birBaseRef;
        data["transId"] = this.transId;
        data["ref1"] = this.ref1;
        data["ref2"] = this.ref2;
        data["ref3"] = this.ref3;
        data["docType"] = this.doctype;
        
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBIRData {
    docEntry?: number | undefined;
    docNum?: number | undefined;
    cardCode?: string | undefined;
    cardName?: string | undefined;
    branch?: number | undefined;
    branchName?: string | undefined;
    docDate?: Date | undefined;
    docDueDate?: Date | undefined;
    docTotal?: number | undefined;
    vatSum?: number | undefined;
    docStatus?: string | undefined;
    toWarehouse?: string | undefined;
    comments?: string | undefined;
    currency?: string | undefined;
    address?: string | undefined;
    numAtCard?: string | undefined;
    birBaseRef?: string | undefined;
    transId?: number | undefined;
    ref1?: number | undefined;
    ref2?: string | undefined;
    ref3?: number | undefined;
    doctype?: string | undefined;
    details?: BIRDataDetails[] | undefined;
}
export class BIRTransaction implements IBIRTransaction {
    docentry?: string | undefined;
    postingdate?: Date | undefined;

    constructor(data?: IBIRTransaction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.docentry = _data["docentry"];
            this.postingdate = _data["postingdate"];
        }
    }

    static fromJS(data: any): BIRTransaction {
        data = typeof data === 'object' ? data : {};
        let result = new BIRTransaction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docentry"] = this.docentry;
        data["postingdate"] = this.postingdate;
        return data;
    }
}
export interface IBIRTransaction {
    docentry?: string | undefined;
    postingdate?: Date | undefined;
}

